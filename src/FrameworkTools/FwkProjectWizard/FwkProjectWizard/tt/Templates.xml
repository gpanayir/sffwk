<?xml version="1.0" encoding="utf-8"?>
<TemplateDocument>

  
<Template name="Property">
<Content>	<![CDATA[#region [[Property_Name]]
	public [TYPENAME][NullToken] [Property_Name]
	{
		get { return _[Property_Name]; }
		set { _[Property_Name] = value;}
	}
	#endregion]]>
</Content>
</Template>
  
  <Template name="Property_Binary">
    <Content>    <![CDATA[#region [[Property_Name]]
   [System.Xml.Serialization.XmlElementAttribute("[Property_Name]",DataType = "[SCHEMATYPENAME]")]
   public Byte[][NullToken] [Property_Name]
    {
      get { return _[Property_Name]; }
      set { _[Property_Name] = value;  }
    }
     #endregion]]>
    </Content>
  </Template>
  
  <Template name="ParameterSummary">
    <Content><![CDATA[///<param name="p[MethodParameterName]">[ParameterName]</param>]]></Content>
  </Template>
  <Template name="ParameterInput">
    <Content>     <![CDATA[[ConditionalString]
         wDataBase.AddInParameter(wCmd, "[ParameterName]", [ParameterType], [ParameterValue]);]]>
    </Content>
  </Template>
  <Template name="ParameterOutput">
    <Content>     <![CDATA[/// [ParameterName]
          wDataBase.AddOutParameter(wCmd, "[ParameterName]", [ParameterType], [ParameterLength]);]]>
    </Content>
  </Template>
  
  <Template name="InsertReturn">
    <Content>
      <![CDATA[
				p[EntityName].[Property_Name] = ([TYPENAME]) wDataBase.GetParameterValue(wCmd, "[Property_Name]");]]>
    </Content>
  </Template>
  <Template name="SearchReturn">
    <Content>
      <![CDATA[
		
         using (IDataReader reader = wDataBase.ExecuteReader(wCmd))
         {
           while (reader.Read())
           {
             w[EntityName] = new [EntityName]();
                        
             //Perform your mapping code here

             w[EntityName]List.Add(p[EntityName]);
            }
         }

         return w[EntityName]List;]]>
    </Content>
  </Template>
  <Template name="EntityAnListDeclaration">
    <Content>
      <![CDATA[
      [EntityName]List w[EntityName]List	= new [EntityName]List();
      [EntityName] w[EntityName];
      ]]>
    </Content>
  </Template>
  
  <Template name="SPParameterBatchBit">
    <Content>     <![CDATA[wBatchCommandText.Append("@[Property_Name] = ");
           [Batch_NULL_Question]
               wBatchCommandText.Append(w[EntityName].[Property_Name]  == true ? "1":"0");
           wBatchCommandText.Append( ",");
        ]]>
    </Content>
  </Template>
  <Template name="SPParameterBatchDateTime">
    <Content>     <![CDATA[wBatchCommandText.Append("@[Property_Name] = ");
          [Batch_NULL_Question]
              wBatchCommandText.Append(string.Concat("'", w[EntityName].[Property_Name].Value.ToString("yyy-MM-dd H:mm:ss"),"'"));
          wBatchCommandText.Append( ",");
]]>
    </Content>
  </Template>
  <Template name="SPParameterBatchBinary">
    <Content>     <![CDATA[wBatchCommandText.Append("@[Property_Name] = ");
          [Batch_NULL_Question]
             wBatchCommandText.Append(string.Concat("'" , w[EntityName].[Property_Name] , "'"));
          wBatchCommandText.Append( ",");
]]>
    </Content>
  </Template>
  <Template name="SPParameterBatchInteger">
    <Content>     <![CDATA[wBatchCommandText.Append("@[Property_Name] = ");
         [Batch_NULL_Question]
            wBatchCommandText.Append(w[EntityName].[Property_Name]);
         wBatchCommandText.Append( ",");
]]>
    </Content>
  </Template>
  <Template name="SPParameterBatchDecimal">
    <Content>     <![CDATA[wBatchCommandText.Append("@[Property_Name] = ");
        [Batch_NULL_Question]
                wBatchCommandText.Append(w[EntityName].[Property_Name].ToString().Replace(",","."));
        wBatchCommandText.Append( ",");
]]>
    </Content>
  </Template>
  <Template name="SPParameterBatchString">
    <Content>     <![CDATA[wBatchCommandText.Append("@[Property_Name] = ");
        [Batch_NULL_Question]
            wBatchCommandText.Append(string.Concat("'" , w[EntityName].[Property_Name] , "'"));
        wBatchCommandText.Append( ",");
]]>
    </Content>
  </Template>
    <Template name="Batch_NULL_Question">
      <Content><![CDATA[ if (w[EntityName].[Property_Name] == null) wBatchCommandText.Append("NULL");
         else
]]>
      </Content>
  </Template>
  <Template name="Batch_NULL_Question_string">
    <Content>
      <![CDATA[ if (String.IsNullOrEmty(w[EntityName].[Property_Name])) wBatchCommandText.Append("NULL");
         else
]]>
    </Content>
  </Template>
  
  <Template name="ConditionalString">
    <Content>
      <![CDATA[if(!string.IsNullOrEmpty(p[EntityName].[ParameterName]))]]>
    </Content>
  </Template>
  <Template name="MethodBatch">
    <Content>
      <![CDATA[		
    /// <summary>
    /// 
    /// </summary>
    /// <param name="[EntityName]List">p[EntityName]List</param>
    /// <Date>[CreationDate]</Date>
    /// <Author>[Author]</Author>
    public static  void [MethodName]Batch([EntityName]List p[EntityName]List)
    {
      Database wDatabase = null;
      DbCommand wCmd = null;
			StringBuilder wBatchCommandText ;
      try
      {    
       wDatabase = DatabaseFactory.CreateDatabase("CnnStringKey");
       wBatchCommandText = new StringBuilder();
       #region --[Seteo de Parametros]--
       
        foreach ([EntityName] w[EntityName] in p[EntityName]List)
        {
         [Parameters]
		 		}
        
       #endregion

        wCmd = wDatabase.GetSqlStringCommand(wBatchCommandText.ToString());
        wCmd.CommandType = CommandType.Text;

        if (wBatchCommandText.Length > 0)
        {
            wDatabase.ExecuteNonQuery(wCmd);
        }
      
        
      }
       catch (Exception ex)
      {
        throw Fwk.Exceptions.ExceptionHelper.ProcessException(ex);
      }
      
    }
]]>
    </Content>
  </Template>
  <Template name="Method">
    <Content>
      <![CDATA[		
    /// <summary>
    /// [MethodName]
    /// </summary>
    [SummaryParams]
    /// <returns>[RetType]</returns>
    /// <Date>[CreationDate]</Date>
    /// <Author>[Author]</Author>
    public static  [RetType] [MethodName]([ParamArgs])
    {
      Database wDataBase = null;
      DbCommand wCmd = null;
      [Declarations]
      try
      {                                              
	    wDataBase = DatabaseFactory.CreateDatabase("CnnStringKey");
	    wCmd = wDataBase.GetStoredProcCommand("[StoredProcedureName]");
        [Parameters]
        [Return]				
      }
       catch (Exception ex)
      {
        throw Fwk.Exceptions.ExceptionHelper.ProcessException(ex);
      }
     
    }
]]>
    </Content>
  </Template>
</TemplateDocument>
