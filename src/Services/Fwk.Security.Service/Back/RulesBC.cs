
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a Prominente Code Generator.
//     Runtime Version:1.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//</auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Fwk.Security;
using Fwk.Bases;
using Fwk.Exceptions;
using Fwk.Security.ISVC.CreateRules;
using System.Data;
using Fwk.Security.Common;
using BE = Fwk.Security.BE;
using Fwk.Security.ISVC.GetAllRules;


using UPDRule = Fwk.Security.ISVC.UpdateRules;
using System.Data.Common;

using Fwk.Security.BE;
using Fwk.Security.DAC;

namespace Fwk.Security.BC
{
    /// <summary>
    /// BC Component
    /// </summary>
    /// <Date>2009-07-14T11:36:00</Date>
    /// <Author>AAguirre</Author>
    public class RulesBC : Fwk.Bases.BaseBC
    {
        string _ProviderName;
        public RulesBC(string pCompanyId,string pProviderName) : base(pCompanyId) { _ProviderName = pProviderName; }

        /// <summary>
        /// Insert
        /// </summary>
        ///<param name="paspnet_RulesBE">aspnet_RulesBE</param>
        /// <returns>void</returns>
          public  void Insert(RulesBE pRulesBE)
        {
        
            RulesDAC.Insert(pRulesBE,_ProviderName);
        }

       

        // Actualiza una Regla Pura (Sin CAtegoria)
        private  void Update(BE.RulesBE pRulesBE)
        {           
            // Update de la Regla
            RulesDAC.Update(pRulesBE,_ProviderName);
        }

    

        /// <summary>
        /// Verifica si una regla tiene categoria
        /// </summary>
        /// <param name="pRuleName">Nombre de la Regla para Verificar</param>
        /// <returns>Retorna Verdadero o Falso si existe una regla vinculada con la categoria</returns>
        private  bool ExistRulesInCategory(string pRuleName)
        {
            Object wCategoryId = null;

            wCategoryId = RulesDAC.ExistRulesInCategory(pRuleName,_ProviderName);

            if (wCategoryId == null)
                return false;
            else
                return true;

        }
     
       

      
      

        ///TODO: ver por que se traen reglas con su categoria: Las reglas no estan en una determinada categoria 
        ///sino la categoria contiene reglas
        ///// <summary>
        ///// GetAllWithCategory
        ///// </summary>
        ///// <returns></returns>
        ///// <Date>2009-07-14T11:36:00</Date>
        ///// <Author>AAguirre</Author>
        //public static GetAllISVCRulesBEList GetAllWithCategory(GetAllISVCRulesBE pRBE)
        //{
        //    GetAllISVCRulesBEList wRBList = null;
        //    GetAllISVCRulesBE wRBE = null;
        //    IDataReader wDR = null;

        //    wDR = RulesDAC.f(pRBE.ApplicationId);
        //    wRBList = new GetAllISVCRulesBEList();

        //    while (wDR.Read())
        //    {                
        //        wRBE = new GetAllISVCRulesBE();

        //        wRBE.ApplicationId = wDR["ApplicationId"] == DBNull.Value ? String.Empty : Convert.ToString(wDR["ApplicationId"]);
        //        wRBE.CategoryId = wDR["CategoryId"] == DBNull.Value? 0 : Convert.ToInt32(wDR["CategoryId"]);
        //        wRBE.CategoryName = wDR["CategoryName"] == DBNull.Value ? String.Empty : Convert.ToString(wDR["CategoryName"]);                
        //        wRBE.expression = wDR["expression"] == DBNull.Value ? String.Empty : Convert.ToString(wDR["expression"]);
        //        wRBE.name = wDR["Name"] == DBNull.Value ? String.Empty : Convert.ToString(wDR["Name"]);
        //        wRBE.ParentCategoryId = wDR["ParentCategoryId"] == DBNull.Value ? 0 : Convert.ToInt32(wDR["ParentCategoryId"]);

        //        wRBList.Add(wRBE);
        //    }

        //    return wRBList;
        //}
               
    }
}