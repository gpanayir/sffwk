using System;
using System.Collections.Generic;
using System.Net;
using System.Text;

namespace Fwk.Exceptions
{
    /// <summary>
    /// Clase especializada en procesar erroes producidos en el Wrappper de aplicaciones
    /// cuando un cliente intenta conectarce a un Despachador de servicios.-
    /// </summary>
    public class ProcessConnectionsException
    {
      


        /// <summary>
        /// Procesa la exepcion que se produce al intentar conectarce al cliente y genera un 
        /// ServiceError el cual es insertado al Response.-
        /// </summary>
        /// <param name="pEx">Exepcion</param>
        /// <param name="pURL">Direccion web del servicio web donde esta el despachador de servicio</param>
        /// <returns>ServiceError <see cref="ServiceError"/></returns>
        public static ServiceError Process(Exception pEx, String pURL)
        {

            ServiceError wServiceError = null;
            switch (pEx.GetType().FullName)
            {
                case "System.Net.WebException":
                    {
                        wServiceError = ProcessWebException((System.Net.WebException)pEx, pURL);
                        wServiceError.Assembly = "Fwk.FrontEnd.ServiceIntefaceWrappers.dll";
                        wServiceError.Namespace = "Fwk.FrontEnd.ServiceIntefaceWrappers";
                        wServiceError.Class = "Wrapper : IServiceInterfaceWrapper";
                        break;
                    }
                case "System.Configuration.ConfigurationErrorsException":
                    {
                        wServiceError = ProcessConfigurationException((System.Configuration.ConfigurationException)pEx);
                        wServiceError.Assembly = "Fwk.Bases.FrontEnd.dll";
                        wServiceError.Namespace = "Fwk.Bases.FrontEnd";
                        wServiceError.Class = "FrmBase";
                        break;
                    }
                case "System.Web.Services.Protocols.SoapException":
                    {
                        wServiceError = ProcessSoapException((System.Web.Services.Protocols.SoapException)pEx);
                        wServiceError.Assembly = "Fwk.ServiceManagement.dll";
                        wServiceError.Namespace = "Fwk.ServiceManagement";
                        wServiceError.Class = "ServiceManagement : Despachador de servicios ";

                        break;
                    }
                default:
                    { 
                        wServiceError = ProcessDefaultException(pEx);
                        wServiceError.Assembly = "Se desconoce.. examine el error";
                        wServiceError.Namespace = "Se desconoce.. examine el error";
                        wServiceError.Class = "Wrapper : IServiceInterfaceWrapper";
                        break;
                       
                    }
            }


            wServiceError.UserName = Environment.UserName;
            wServiceError.Machine = Environment.MachineName;


            wServiceError.Source = "Cliente " + Environment.MachineName;
            wServiceError.Type = pEx.GetType().FullName;

            return wServiceError;
        }

        

        /// <summary>
        /// Procesa la exepcion que se produce al intentar conectarce al cliente y genera un 
        /// ServiceError el cual es insertado al Response.-
        /// </summary>
        /// <param name="pEx">Exepcion</param>
        /// <returns>ServiceError <see cref="ServiceError"/></returns>
        public static ServiceError Process(Exception pEx)
        { 
            
            return Process(pEx, String.Empty);
           
        }

        /// <summary>
        /// Procesa las exepciones no detectadas <see cref="System.Web.Services.Protocols.SoapException"/>
        /// </summary>
        /// <param name="pException">Exception por defecto producida <see cref="System.Web.Services.Protocols.SoapException"/></param>
        /// <returns>ServiceError <see cref="ServiceError"/></returns>
        private static ServiceError ProcessDefaultException(Exception pException)
        {
            ServiceError wServiceError = new ServiceError();
            StringBuilder wMessage = new StringBuilder();


            wMessage.AppendLine("Ocurrio un problema inesperado al intentar ejecutar un servicio.");
            wMessage.AppendLine();
            wMessage.AppendLine("Mensage: ");
            wMessage.AppendLine(pException.Message);

            wServiceError.Message = wMessage.ToString();
            if (pException.InnerException != null)
                wServiceError.InnerMessageException = pException.InnerException.Message;

            wMessage = null;

            return wServiceError;
        }

        /// <summary>
        /// Procesa las exepciones tipo SoapException <see cref="System.Web.Services.Protocols.SoapException"/>
        /// </summary>
        /// <param name="soapException">SoapException <see cref="System.Web.Services.Protocols.SoapException"/></param>
        /// <returns>ServiceError <see cref="ServiceError"/></returns>
        private static ServiceError ProcessSoapException(System.Web.Services.Protocols.SoapException soapException)
        {
            ServiceError wServiceError = new ServiceError();
            StringBuilder wMessage = new StringBuilder();

            
            wMessage.AppendLine("Ocurrio un problema al intentar ejecutar un servicio.");
            wMessage.AppendLine("Verifique que el despachador de servicio se encuentre actualizado con las ultimas librerias del Framework .");
            wMessage.AppendLine();
            wMessage.AppendLine("Mensage SOAP: ");
            wMessage.AppendLine(soapException.Message);

            wServiceError.Message = wMessage.ToString();
            if (soapException.InnerException != null)
                wServiceError.InnerMessageException = soapException.InnerException.Message;

            wMessage = null;

            return wServiceError;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="configurationErrorsException"></param>
        /// <returns>ServiceError <see cref="ServiceError"/></returns>
        private static ServiceError ProcessConfigurationException(System.Configuration.ConfigurationException configurationErrorsException)
        {
            ServiceError wServiceError = new ServiceError();
            StringBuilder wMessage = new StringBuilder();

            
            wMessage.AppendLine("Ocurrio un problema al intentar obtener la confuguracion del cliente al conectarce al Servicio Web. ");
            wMessage.AppendLine("Verifique  si esta bien formado el archivo de configuracion AppConfig y si contiene la seccion que configura el Wrapper");
            wMessage.AppendLine();
            wMessage.AppendLine("Mensage Web: ");
            wMessage.AppendLine(configurationErrorsException.Message);

            wServiceError.Message = wMessage.ToString();
            if (configurationErrorsException.InnerException != null)
                wServiceError.InnerMessageException = configurationErrorsException.InnerException.Message;

            wMessage = null;

            return wServiceError;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="pWebException"></param>
        /// <param name="pURL"></param>
        /// <returns>ServiceError <see cref="ServiceError"/></returns>
        private static ServiceError ProcessWebException(WebException pWebException, String pURL)
        {
            ServiceError wServiceError = new ServiceError();
            StringBuilder wMessage = new StringBuilder();

            wMessage.AppendLine("Ocurrio un problema al intentar conectarce al Servicio Web. " + GetGenericStatusCode(pWebException));
            wMessage.Append("URL : ");
            wMessage.AppendLine(pURL);
            wMessage.AppendLine();
            
            wMessage.AppendLine(pWebException.Message);

            wMessage.AppendLine("Verifique el código de estado mostrado arriba para revelar ");
            wMessage.AppendLine("la razón exacta por la que una solicitud no se realiza correctamente en el siguiente enlace: ");
            wMessage.AppendLine("http://support.microsoft.com/kb/318380/es");
            
            wServiceError.Message = wMessage.ToString();
            if (pWebException.InnerException != null)
                wServiceError.InnerMessageException = pWebException.InnerException.Message;

            wMessage = null;

            return wServiceError;
        }

        /// <summary>
        /// Obtiene el menzage general para un grupo de codigos de estados, estos pueden ser:
        /// 3xx - Redirección
        ///       El explorador cliente debe realizar más acciones para cumplir la solicitud. 
        ///       Por ejemplo, puede que el explorador tenga que solicitar una página diferente en el servidor o repetir la solicitud 
        ///       utilizando un servidor proxy.
        /// 4xx - Error del cliente 
        ///       Se produce un error, que parece causado por el cliente. Por ejemplo, el cliente puede solicitar una página que no existe o quizás no proporcione información de autenticación válida.
        /// 5xx - Error del servidor
        ///       El servidor no puede terminar la solicitud porque encuentra un error.
        /// </summary>
        /// <param name="pWebException"></param>
        /// <returns>String </returns>
        private static String GetGenericStatusCode(WebException pWebException)
        {
            String str = String.Empty;

            if (pWebException.Message.Contains("3"))
            {
                str = "El error es de Redirección (estado: ";
            }
            //Se produce un error, que parece causado por el cliente. Por ejemplo, el cliente puede solicitar una página que no existe o quizás no proporcione información de autenticación válida.
            if (pWebException.Message.Contains("4"))
            {
                str = "El error es del lado del cliente (estado: ";
            }
            //El servidor no puede terminar la solicitud porque encuentra un error.
            if (pWebException.Message.Contains("5"))
            {
                str = "El error es del lado del servidor (estado: ";
            }

            if (pWebException.Status == WebExceptionStatus.ConnectFailure && str == String.Empty)
            {
                //Falta de archivo de configuracion 
                str = "El error es del lado del cliente y posiblemente se deba a un problema con el archivo de configuracion .config.";
                str += "Verifique si este existe donde corre el proceso que realiza peticiones al Despachador de servicios";
            }


            return str + pWebException.Status.ToString() + ") ";
        }
    }
}
